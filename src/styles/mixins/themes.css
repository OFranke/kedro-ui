/**
 * Themed - adds theme at the end of the given classes
 * @param {string} propName - name of a property which should be modified
 * @param {string} category - name of a property taken from the style themes object
 * @param {string} property - value taken from the style themes object
 * @param {string} variant - value of the property's variant value taken from the style themes object
 */
@define-mixin themed $propName, $category: base, $variant: default {
  &.kui-theme--light {
    $(propName): map(themes, light, $category, $variant);
  }

  &.kui-theme--dark {
    $(propName): map(themes, dark, $category, $variant);
  }
}

/**
 * ThemedStart - adds theme at the start of the given classes
 * @param {string} propName - name of a property which should be modified
 * @param {string} category - name of a property taken from the style themes object
 * @param {string} property - value taken from the style themes object
 * @param {string} variant - value of the property's variant value taken from the style themes object
 */
@define-mixin themedStart $propName, $category: base, $variant: default {
  .kui-theme--light& {
    $(propName): map(themes, light, $category, $variant);
  }

  .kui-theme--dark& {
    $(propName): map(themes, dark, $category, $variant);
  }
}

/**
 * ThemedParent - adds theme to the parent of given classes
 * @param {string} propName - name of a property which should be modified
 * @param {string} category - name of a property taken from the style themes object
 * @param {string} property - value taken from the style themes object
 * @param {string} variant - value of the property's variant value taken from the style themes object
 */
@define-mixin themedParent $propName, $category: base, $variant: default {
  .kui-theme--light & {
    $(propName): map(themes, light, $category, $variant);
  }

  .kui-theme--dark & {
    $(propName): map(themes, dark, $category, $variant);
  }
}

/**
 * ThemedState - adds theme at the end of given classes and also adds given state to the themes
 * @param {string} state - the state of the component which will be targeted
 * @param {string} propName - name of a property which should be modified
 * @param {string} category - name of a property taken from the style themes object
 * @param {string} property - value taken from the style themes object
 * @param {string} variant - value of the property's variant value taken from the style themes object
 */
@define-mixin themedState $state, $propName, $category: base, $variant: default {
  &.kui-theme--light$(state) {
    $(propName): map(themes, light, $category, $variant);
  }

  &.kui-theme--dark$(state) {
    $(propName): map(themes, dark, $category, $variant);
  }
}

/* stylelint-disable */

/**
 * ThemedParentState - adds theme to the parent and also adds given state to the given classes
 * @param {string} state - the state of the component which will be targeted
 * @param {string} propName - name of a property which should be modified
 * @param {string} category - name of a property taken from the style themes object
 * @param {string} property - value taken from the style themes object
 * @param {string} variant - value of the property's variant value taken from the style themes object
 */
@define-mixin themedParentState $state, $propName, $category: base, $variant: default {
  .kui-theme--light &:$(state) {
    $(propName): map(themes, light, $category, $variant);
  }

  .kui-theme--dark &:$(state) {
    $(propName): map(themes, dark, $category, $variant);
  }
}
